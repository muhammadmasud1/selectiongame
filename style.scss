@import url("https://fonts.googleapis.com/css?family=Raleway:400,700");

*, *::before, *::after {
    padding: 0;
    margin: 0 auto;
    box-sizing: border-box;
}

body {
  font-family: Raleway, sans-serif;
  background-color: #000;
  color: #006;
  min-height: 100vh;
  display: grid;
  place-items: center;
  perspective: 100vmin;
  font-size: 4vmin;
  overflow: hidden;
  background: url(img/hero.jpg) no-repeat;
  background-size: cover;
  background-position: center;
  object-fit: cover;
  
  *:not(:empty) {
    transform-style: preserve-3d;
  }
}

:root {
  --duration: 2s;
}

button {
  position: absolute;
  left: 50%; top: 50%;
  width: 10em; height: 10em;
}

input {
  display: none;
}

label {
  cursor: pointer;
}

#rb-init:checked ~ .scene {
  --bulbAnimation: bulb-pre;
  --bulbPlayState: running;
  --btnClose: 0;
  --startMenuDisplay: grid;
  
  .winner { animation: none; }
  .btnText::after { animation: none; }
}

#rb-start:checked ~ .scene {
  --bulbAnimation: bulb;
  --scene-rx: 60deg;
  --preDelay: 60;
  --bulbPlayState: running;
  --btnDuration: 1s 1s;
  --stopLabelDisplay: block;
  --markOpacity: 1;
  --winnerPlayState: running;
  
  .btnText::before {
    animation: startingText 2s step-end forwards;

    @keyframes startingText {
      0% { content: 'Catch'; }
      20% { content: 'That'; }
      40% { content: 'Light!'; }
      60% { content: ''; }
      80%, 100% { content: 'Go!'; }
    }    
  }
  
  .label-stop {
    animation: labelEnter 2s step-end forwards;
  }
}

#rb-stop:checked ~ .scene {
  --bulbAnimation: bulb;
  --preDelay: 60;
  --btnClose: 0.5;
  --winnerOpacity: 1;
  --winningTextOpacity: 1;
  
  --initLabelDisplay: block;
  .label-init {
    animation: labelEnter 1.5s step-end forwards;
  }
  
  .btnText::before {
    content: 'Try again?';
    transform: translateY(1em) scale(0.5);
  }
}

@keyframes labelEnter {
  0% { transform: translateZ(1em) translateX(100vw); }
  80%, 100% { transform: translateZ(1em) translateX(0); }
}

.scene {
  position: relative;
  transform: rotateX(var(--scene-rx, 0deg));
  transition: transform 1s 1s;
}

.button {
  position: absolute;
  transform: translateZ(-0.5em);
  
  & i {
    position: absolute;
    inset: -6em;
    background-color: hsl(180, 75%, var(--light, 75%));
    border-radius: 50%;
    transform: translateZ(calc(var(--tz) * var(--btnClose, 1)));
    transition: transform var(--btnDuration, 0.5s);
    pointer-events: none;

    @for $i from 1 through 10 {
      &:nth-child(#{$i}) {
        --tz: #{$i * 0.1em};
        --light: #{15% + $i * 5%};
      }
    }
  }
        
  &:active i {
    --btnClose: 0.5;
    transition: none;      
  }
}

.btnText {
  box-shadow: 0 0 2em #fff8 inset;
  color: #004;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    display: grid;
    place-items: center;
    font-size: 2em;
  }
  
  &::after {
    content: '';
    position: absolute;
    inset: 0;
    display: grid;
    place-items: center;
    font-size: 2em;
    opacity: var(--winningTextOpacity, 0);
    animation: winnerText var(--duration) infinite step-end var(--winnerPlayState, paused);
  
    @keyframes winnerText {
      0% { content: 'AMAZING!'; }
      1.666%, 98.333% { content: 'Almost...'; }
      3.333% { content: 'Missed :('; }
    }
  }
}

#rb-speed1:checked ~ .scene { --duration: 5s; }
#rb-speed2:checked ~ .scene { --duration: 4s; }
#rb-speed3:checked ~ .scene { --duration: 3s; }
#rb-speed4:checked ~ .scene { --duration: 2s; }
#rb-speed5:checked ~ .scene { --duration: 1s; }

#rb-speed1:checked ~ .scene .speeds label:nth-child(1),
#rb-speed2:checked ~ .scene .speeds label:nth-child(2),
#rb-speed3:checked ~ .scene .speeds label:nth-child(3),
#rb-speed4:checked ~ .scene .speeds label:nth-child(4),
#rb-speed5:checked ~ .scene .speeds label:nth-child(5) { --color: green; }

.startMenu {
  display: var(--startMenuDisplay, none);
  place-items: center;
  position: absolute;
  inset: -4em -6em;
  transform: translateZ(1em);
  
  .speeds {
    display: flex;
    gap: 1em;
    
    label {
      border-bottom: 3px solid var(--color, transparent);
    }

    svg {
      height: 1em;
      fill: var(--color, maroon);
    }
  }

  .label-start {
    border: 2px outset #600;
    padding: 0.5em;
    user-select: none;
    
    &:active {
      border-style: inset;
    }
  }
}

.label-stop {
  position: absolute;
  inset: -6em;
  border-radius: 50%;
  transform: translateZ(1em) translateX(100vw);
  display: var(--stopLabelDisplay, none);
}

.label-init {
  position: absolute;
  inset: -6em;
  border-radius: 50%;
  transform: translateZ(1em) translateX(100vw);
  display: var(--initLabelDisplay, none);
}

.winner {
  position: absolute;
  animation: winner var(--duration) infinite steps(60, end) var(--winnerPlayState, paused);
  
  @keyframes winner {
    from { transform: rotate(0deg) translateY(10em); }
    to { transform: rotate(360deg) translateY(10em); }
  }
  
  &::after {
    content: '';
    position: absolute;
    inset: -1em;
    border-radius: 50%;
    border: 0.25em solid;
    border-color: #0ff transparent;
    animation: winnerAfter 1s infinite linear;
    opacity: var(--winnerOpacity, 0);

    @keyframes winnerAfter {
      to { transform: rotate(360deg); }
    }
  }
}

.wheel {
  pointer-events: none;

  &::before {
    content: '';
    position: absolute;
    inset: -12em;
    background-image: radial-gradient(#0000 6em, #300 6em, #000 9em, #444 9.5em 10.5em, #0000 11em);
    transform: translateZ(-0.5em);
  }
  
  &::after {
    content: '';
    position: absolute;
    inset: -1em;
    background-image: radial-gradient(closest-side, #0000, #0f0, #0000);
    opacity: var(--markOpacity, 0);
    transition: opacity 1s 1s;
    animation: mark 400ms infinite ease-in-out alternate;
    
    @keyframes mark {
      from { transform: translateZ(-0.5em) translateY(10em) scale(0.75); }
      to { transform: translateZ(-0.5em) translateY(10em) scale(1.25); }
    }
  }
}

.bulb {
  --delay: calc(var(--duration) / var(--preDelay, 4) * var(--ix) - var(--duration) * 15) ;
  
  position: absolute;
  inset: -0.5em;
  border-radius: 50%;
  background-image: radial-gradient(circle at top, #fff2, 70%, #000d);
  transform:
    rotate(calc(var(--ix) * 6deg))
    translateY(10em)
    rotate(calc(var(--ix) * -6deg))
    rotateX(calc(var(--scene-rx, 0deg) * -1));
  transition: transform 1s 1s;
  animation: var(--bulbAnimation, bulb-pre) var(--duration) var(--delay) infinite var(--bulbPlayState, paused) step-end;

  @keyframes bulb-pre {
    0%, 100% { background-color: var(--clr, #ff0); }
    25%, 75% { background-color: #220; }
  }
  
  @keyframes bulb {
    0% { background-color: var(--clr, #ff0); }
    1.666%, 100% { background-color: #220; }
  }
  
  &:last-child {
    --clr: #0f0;
  }
  &:first-child, &:nth-last-child(2) {
    --clr: #af0;
  }
  
  @for $i from 1 through 60 {
    &:nth-child(#{$i}) {
      --ix: #{$i};
    }
  }
}
